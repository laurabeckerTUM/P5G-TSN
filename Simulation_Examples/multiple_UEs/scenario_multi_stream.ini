[General]
network = ScenarioMultiStream
sim-time-limit = 60s
repeat = 50

**.scalar-recording = false
**.bin-recording = false
**.vector-recording = false

# Timesynchronisation
*.*.hasTimeSynchronization = false

*.*.eth[*].bitrate = 100Mbps
*.*.custom_ethgate[*].bitrate = 100Mbps

# routing
**.configuratortwo.netmaskRoutes = ""
**.configuratortwo.addSubnetRoutes = false
**.configuratortwo.addDefaultRoutes = false

*.configuratortwo.config = xmldoc("inputConfig/demo.xml") 
**.configuratorDstt.config = xmldoc("inputConfig/demo.xml")
*.globalData.config = xmldoc("inputConfig/DsttIpMacConfigMulti.xml")
*.globalData.qosMappingConfig = xmldoc("inputConfig/TrafficPcpQfiMappingMulti.xml")

# Interface
**.fcsMode = "computed"
**.crcMode = "computed"
*.*.ethernet.typename = "EthernetLayer"
*.*.ethernet1.typename = "EthernetLayer"
*.*.eth[*].typename = "LayeredEthernetInterface"
*.*.eth1.typename = "LayeredEthernetInterface"
*.*.custom_ethgate[*].typename = "LayeredEthernetInterface"
*.*.eth1.bitrate = 100Mbps

#MacTables and schedule
**.dsttUe*.macTableModule = xmldoc("inputConfig/demo.xml")
*.dsttUe*.macForwardingTableConfigurator.typename = ""
*.tsnDevice3.interfaceTable = [{address:"dsttUe3", interface:"eth0"}]
*.dsttUe3.interfaceTable = [{address:"tsnSwitch3", interface:"eth0"}]
*.tsnDevice4.interfaceTable = [{address:"dsttUe4", interface:"eth0"}]
*.dsttUe4.interfaceTable = [{address:"tsnSwitch4", interface:"eth0"}]

# Connect each UE to the gNB
*.numUe = 2
**.macCellId = 1
**.masterId = 1
**.nrMacCellId = 1
**.nrMasterId = 1
**.mac.schedulingDisciplineDl = "DQOS"
**.mac.schedulingDisciplineUl = "DQOS"


#Visualisation
*.tsnDevice*.clock.displayStringTextFormat = "diff:%d"
*.tsnSwitch*.clock.displayStringTextFormat = "diff:%d"
*.visualizer.typename = "IntegratedMultiCanvasVisualizer"
*.visualizer.infoVisualizer.displayInfos = true
*.visualizer.dataLinkVisualizer[0].displayLinks = true
*.visualizer.dataLinkVisualizer[0].activityLevel = "protocol"
*.ipvisualizer.*.interfaceTableVisualizer.displayInterfaceTables = true
*.interfaceTable.displayAddresses = True
*.visualizer.*.interfaceTableVisualizer.displayInterfaceTables = true

*.tsnFiveGtrafficMappingXml = xmldoc("TrafficPcpQfiMappingMulti.xml")
#**.fbPeriod = 10 
*.packetDropEnabled = false
*.*.cellularNic.LteChannelModelType = "NRChannelModel_3GPP38_901"

*.tsnEnabled = true

[Config UDPDL]
*.tsnDevice1.numApps = 2
*.tsnDevice1.app[*].typename = "UdpBasicApp"
*.tsnDevice1.app[0].packetName = "network control"
*.tsnDevice1.app[0].destAddresses = "10.0.0.30" # "tsnDevice3"
*.tsnDevice1.app[0].destPort = 1003
*.tsnDevice1.app[1].packetName = "best effort"
*.tsnDevice1.app[1].destAddresses = "10.0.0.34" #"tsnDevice4"
*.tsnDevice1.app[1].destPort = 1004

# server applications
*.tsnDevice3.numApps = 1
*.tsnDevice3.app[*].typename = "UdpSink"
*.tsnDevice3.app[0].localPort = 1003
*.tsnDevice4.numApps = 1
*.tsnDevice4.app[*].typename = "UdpSink"
*.tsnDevice4.app[0].localPort = 1004

**.tsnDevice1.app[*].*packetSent*.vector-recording = true
**.tsnDevice3.app[*].*packetReceived*.vector-recording = true
**.tsnDevice3.app[*].*throughput*.vector-recording = true
**.tsnDevice3.app[*].*endToEndDelay*.vector-recording = true
**.tsnDevice4.app[*].*packetReceived*.vector-recording = true
**.tsnDevice4.app[*].*throughput*.vector-recording = true
**.tsnDevice4.app[*].*endToEndDelay*.vector-recording = true

# enable outgoing streams
*.tsnDevice3.hasIncomingStreams = true
*.tsnDevice4.hasIncomingStreams = true
*.tsnDevice1.hasOutgoingStreams = true
*.tsnDevice1.bridging.streamIdentifier.identifier.mapping = [{stream: "network control", packetFilter: expr(udp.destPort == 1003)},
                                                         	{stream: "best effort", packetFilter: expr(udp.destPort == 1004)}]
*.tsnDevice1.bridging.streamCoder.encoder.mapping = [{stream: "network control", vlan:103, pcp: 3},
                                                 {stream: "best effort", vlan:104, pcp: 4}]
*.tsnSwitch*.hasEgressTrafficShaping = true
*.tsnSwitch*.eth[*].macLayer.queue.numTrafficClasses = 2
*.nwtt.eth[*].macLayer.queue.numTrafficClasses = 2

#Enable 802.1q
*.*.ieee8021q.typename = "Ieee8021qProtocol"
*.tsnSwitch*.bridging.directionReverser.reverser.excludeEncapsulationProtocols = ["ieee8021qctag"]


[Config UDPUL]
*.tsnDevice3.numApps = 1
*.tsnDevice3.app[*].typename = "UdpBasicApp"
*.tsnDevice3.app[0].packetName = "network control"
*.tsnDevice3.app[*].destAddresses = "tsnDevice1"
*.tsnDevice3.app[0].destPort = 1003
*.tsnDevice4.numApps = 1
*.tsnDevice4.app[*].typename = "UdpBasicApp"
*.tsnDevice4.app[0].packetName = "best effort"
*.tsnDevice4.app[*].destAddresses = "tsnDevice1"
*.tsnDevice4.app[0].destPort = 1004

# server applications
*.tsnDevice1.numApps = 2
*.tsnDevice1.app[*].typename = "UdpSink"
*.tsnDevice1.app[0].localPort = 1003
*.tsnDevice1.app[1].localPort = 1004

**.tsnDevice3.app[*].*packetSent*.vector-recording = true
**.tsnDevice4.app[*].*packetSent*.vector-recording = true
**.tsnDevice1.app[*].*packetReceived*.vector-recording = true
**.tsnDevice1.app[*].*throughput*.vector-recording = true
**.tsnDevice1.app[*].*endToEndDelay*.vector-recording = true

# enable outgoing streams
*.tsnDevice3.hasOutgoingStreams = true
*.tsnDevice4.hasOutgoingStreams = true
*.tsnDevice3.bridging.streamIdentifier.identifier.mapping = [{stream: "network control", packetFilter: expr(udp.destPort == 1003)},
                                                         	{stream: "best effort", packetFilter: expr(udp.destPort == 1004)}]
*.tsnDevice3.bridging.streamCoder.encoder.mapping = [{stream: "network control", vlan:103, pcp: 3},
                                                 {stream: "best effort", vlan:104, pcp: 4}]
*.tsnSwitch*.hasEgressTrafficShaping = true
*.tsnSwitch*.eth[*].macLayer.queue.numTrafficClasses = 3

# credit based traffic shaping
*.nwtt.bridging.typename = "TsnRelayUnit"
*.nwtt.hasOutgoingStreams = true
*.nwtt.eth[*].macLayer.queue.numTrafficClasses = 3

#Enable 802.1q
*.*.ieee8021q.typename = "Ieee8021qProtocol"
*.tsnSwitch*.bridging.directionReverser.reverser.excludeEncapsulationProtocols = ["ieee8021qctag"]

[Config UL_Multi]
extends = UDPUL
# Component carrier
*.carrierAggregation.numComponentCarriers = 1
*.carrierAggregation.componentCarrier[0].numBands = 50
*.carrierAggregation.componentCarrier[0].numerologyIndex = 1
*.carrierAggregation.componentCarrier[0].carrierFrequency = 3.7GHz
*.carrierAggregation.componentCarrier[0].useTdd = true
*.carrierAggregation.componentCarrier[0].tddNumSymbolsDl = 6 
*.carrierAggregation.componentCarrier[0].tddNumSymbolsUl = 4
*.carrierAggregation.componentCarrier[0].tddNumSlotsDl = 7
*.carrierAggregation.componentCarrier[0].tddNumSlotsUl = 2
*.carrierAggregation.componentCarrier[0].tddPatternPeriodicity = 10 
*.gnb.cellularNic.channelModel[0].numerologyIndex = 1
*.ue.cellularNic.nrChannelModel[0].componentCarrierIndex = 0

*.tsnDevice3.app[*].startTime = exponential(10ms)
*.tsnDevice3.app[*].messageLength = 1000B 

*.tsnDevice4.app[*].startTime = exponential(10ms)
*.tsnDevice4.app[*].messageLength = 1000B 


*.gnb.cellularNic.channelModel[0].scenario = "OPTIMAL"
*.dsttUe*.cellularNic.nrChannelModel[0].scenario = "OPTIMAL"
*.tsnDevice3.app[*].sendInterval = exponential(1ms)
*.tsnDevice4.app[*].sendInterval = exponential(1ms)
**.*.MinBlockAmount = 1


[Config DL_Multi]
extends = UDPDL
# Component carrier
*.carrierAggregation.numComponentCarriers = 1
*.carrierAggregation.componentCarrier[0].numBands = 50
*.carrierAggregation.componentCarrier[0].numerologyIndex = 1
*.carrierAggregation.componentCarrier[0].carrierFrequency = 3.7GHz
*.carrierAggregation.componentCarrier[0].useTdd = true
*.carrierAggregation.componentCarrier[0].tddNumSymbolsDl = 6 
*.carrierAggregation.componentCarrier[0].tddNumSymbolsUl = 4
*.carrierAggregation.componentCarrier[0].tddNumSlotsDl = 6
*.carrierAggregation.componentCarrier[0].tddNumSlotsUl = 3
*.carrierAggregation.componentCarrier[0].tddPatternPeriodicity = 10 
*.gnb.cellularNic.channelModel[0].numerologyIndex = 1
*.ue.cellularNic.nrChannelModel[0].componentCarrierIndex = 0

*.tsnDevice1.app[0].startTime = exponential(10ms)
*.tsnDevice1.app[1].startTime = exponential(10ms)
*.tsnDevice1.app[*].messageLength = 100B 
*.tsnDevice1.app[*].sendInterval = exponential(10ms)

*.gnb.cellularNic.channelModel[0].scenario = "OPTIMAL"
*.dsttUe*.cellularNic.nrChannelModel[0].scenario = "OPTIMAL"
